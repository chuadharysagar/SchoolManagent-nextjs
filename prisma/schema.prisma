generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//define the table 

model Admin {
  id      String @id
  userame String @unique
}

model Student {
  id         String       @id
  userame    String       @unique
  name       String
  surname    String
  email      String?      @unique
  phone      String?      @unique
  address    String
  img        String?
  bloodType  String
  sex        UserSex
  createdAt  DateTime     @default(now())
  parentId   String
  parent     Parent       @relation(fields: [parentId], references: [id])
  classId    Int
  class      Class        @relation(fields: [classId], references: [id])
  gardeId    Int
  garde      Grade        @relation(fields: [gardeId], references: [id])
  Attendence Attendence[]
  result     Result[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String    @id
  userame   String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  students Student[]
  classes  Class[]
}

model Class {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  capacity     Int
  supervisorId String
  supervisor   Teacher        @relation(fields: [supervisorId], references: [id])
  lessons      Lesson[]
  students     Student[]
  gardeId      Int
  garde        Grade          @relation(fields: [gardeId], references: [id])
  events       Event[]
  anoucement   Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement()) //default automatically incrreament the id
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id         Int          @id @default(autoincrement())
  name       String
  day        Day
  startTime  DateTime
  endTime    DateTime
  subjectId  Int
  subject    Subject      @relation(fields: [subjectId], references: [id])
  classId    Int
  class      Class        @relation(fields: [classId], references: [id])
  teacherId  String
  teacher    Teacher      @relation(fields: [teacherId], references: [id])
  exams      Exam[]
  assignment Assignment[]
  Attendence Attendence[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])

  examId Int?
  exam   Exam? @relation(fields: [examId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
}

model Attendence {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  lessonId Int
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

//student enum for the sex
enum UserSex {
  MALE
  FEMALE
}

//option for the starting and endinng time of the lessons hours
enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
